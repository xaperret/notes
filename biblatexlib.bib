@inreference{AbstractSyntaxTree2023,
  title = {Abstract Syntax Tree},
  booktitle = {Wikipedia},
  date = {2023-01-27T19:22:44Z},
  url = {https://en.wikipedia.org/w/index.php?title=Abstract_syntax_tree&oldid=1135931906},
  urldate = {2023-03-17},
  abstract = {In computer science, an abstract syntax tree (AST), or just syntax tree, is a tree representation of the abstract syntactic structure of text (often source code) written in a formal language. Each node of the tree denotes a construct occurring in the text. The syntax is "abstract" in the sense that it does not represent every detail appearing in the real syntax, but rather just the structural or content-related details. For instance, grouping parentheses are implicit in the tree structure, so these do not have to be represented as separate nodes. Likewise, a syntactic construct like an if-condition-then statement may be denoted by means of a single node with three branches. This distinguishes abstract syntax trees from concrete syntax trees, traditionally designated parse trees. Parse trees are typically built by a parser during the source code translation and compiling process. Once built, additional information is added to the AST by means of subsequent processing, e.g., contextual analysis. Abstract syntax trees are also used in program analysis and program transformation systems.},
  langid = {english},
  annotation = {Page Version ID: 1135931906},
  file = {C\:\\Users\\xaper\\Zotero\\storage\\LB3PKCWD\\Abstract_syntax_tree.html}
}

@book{ahoCompilersPrinciplesTechniques2007,
  title = {Compilers: {{Principles}}, {{Techniques}}, \& {{Tools}}},
  shorttitle = {Compilers},
  author = {Aho, Alfred V. and Lam, Monica S. and Sethi, Ravi and Ullman, Jeffrey D.},
  date = {2007},
  eprint = {dIU_AQAAIAAJ},
  eprinttype = {googlebooks},
  publisher = {{Pearson/Addison Wesley}},
  abstract = {Compilers: Principles, Techniques and Tools, known to professors, students, and developers worldwide as the "Dragon Book," is available in a new edition. Every chapter has been completely revised to reflect developments in software engineering, programming languages, and computer architecture that have occurred since 1986, when the last edition published. The authors, recognizing that few readers will ever go on to construct a compiler, retain their focus on the broader set of problems faced in software design and software development.  New chapters include:   Chapter 10 Instruction-Level Parallelism Chapter 11 Optimizing for Parallelism and Locality Chapter 12 Interprocedural Analysis},
  isbn = {978-0-321-48681-3},
  langid = {english},
  pagetotal = {1042}
}

@book{bergmannCompilerDesignTheory1994,
  title = {Compiler Design: Theory, Tools, and Examples},
  shorttitle = {Compiler Design},
  author = {Bergmann, Seth},
  date = {1994},
  publisher = {{W.C. Brown Publishers, c}},
  location = {{Dubuque, Iowa}},
  abstract = {This is an introductory level text for compiler design courses, that emphasizes problem solving skills. The concepts are clearly presented with sampler problems and diagrams to illustrate the concepts. The text also covers lex and yacc two compiler generating tools in UNIX.},
  isbn = {978-0-697-17086-6},
  langid = {english},
  pagetotal = {302},
  keywords = {Compilateurs (Logiciels),Compilers (Computer programs),Computer software Development,Programming,Übersetzerbau},
  annotation = {OCLC: 30548415}
}

@book{birdNaturalLanguageProcessing2009,
  title = {Natural {{Language Processing}} with {{Python}}: {{Analyzing Text}} with the {{Natural Language Toolkit}}},
  shorttitle = {Natural {{Language Processing}} with {{Python}}},
  author = {Bird, Steven and Klein, Ewan and Loper, Edward},
  date = {2009-06-12},
  eprint = {KGIbfiiP1i4C},
  eprinttype = {googlebooks},
  publisher = {{"O'Reilly Media, Inc."}},
  abstract = {This book offers a highly accessible introduction to natural language processing, the field that supports a variety of language technologies, from predictive text and email filtering to automatic summarization and translation. With it, you'll learn how to write Python programs that work with large collections of unstructured text. You'll access richly annotated datasets using a comprehensive range of linguistic data structures, and you'll understand the main algorithms for analyzing the content and structure of written communication.Packed with examples and exercises, Natural Language Processing with Python will help you:Extract information from unstructured text, either to guess the topic or identify "named entities"Analyze linguistic structure in text, including parsing and semantic analysisAccess popular linguistic databases, including WordNet and treebanksIntegrate techniques drawn from fields as diverse as linguistics and artificial intelligenceThis book will help you gain practical skills in natural language processing using the Python programming language and the Natural Language Toolkit (NLTK) open source library. If you're interested in developing web applications, analyzing multilingual news sources, or documenting endangered languages -- or if you're simply curious to have a programmer's perspective on how human language works -- you'll find Natural Language Processing with Python both fascinating and immensely useful.},
  isbn = {978-0-596-55571-9},
  langid = {english},
  pagetotal = {506},
  keywords = {Computers / General,Computers / Languages / General,Computers / Languages / JavaScript,Computers / Languages / Python,Computers / Software Development & Engineering / General}
}

@article{bovetANTLRWorksANTLRGrammar2008,
  title = {{{ANTLRWorks}}: An {{ANTLR}} Grammar Development Environment},
  shorttitle = {{{ANTLRWorks}}},
  author = {Bovet, Jean and Parr, Terence},
  date = {2008},
  journaltitle = {Software: Practice and Experience},
  volume = {38},
  number = {12},
  pages = {1305--1332},
  issn = {1097-024X},
  doi = {10.1002/spe.872},
  url = {https://onlinelibrary.wiley.com/doi/abs/10.1002/spe.872},
  urldate = {2023-01-16},
  abstract = {Programmers tend to avoid using language tools, resorting to ad hoc methods, because tools can be hard to use, their parsing strategies can be difficult to understand and debug, and their generated parsers can be opaque black-boxes. In particular, there are two very common difficulties encountered by grammar developers: understanding why a grammar fragment results in a parser non-determinism and determining why a generated parser incorrectly interprets an input sentence. This paper describes ANTLRWorks, a complete development environment for ANTLR grammars that attempts to resolve these difficulties and, in general, make grammar development more accessible to the average programmer. The main components are a grammar editor with refactoring and navigation features, a grammar interpreter, and a domain-specific grammar debugger. ANTLRWorks' primary contributions are a parser non-determinism visualizer based on syntax diagrams and a time-traveling debugger that pays special attention to parser decision-making by visualizing lookahead usage and speculative parsing during backtracking. Copyright © 2008 John Wiley \& Sons, Ltd.},
  langid = {english},
  keywords = {debugger,grammar development,GUI,parser,rapid prototyping},
  file = {C\:\\Users\\xaper\\Zotero\\storage\\3BUPDW7C\\Bovet and Parr - 2008 - ANTLRWorks an ANTLR grammar development environme.pdf}
}

@online{BuildingLexerParser,
  title = {Building a Lexer and Parser with {{Scala}}'s {{Parser Combinators}} · e.near {{Tech Blog}}},
  url = {https://enear.github.io/2016/03/31/parser-combinators/},
  urldate = {2023-02-14}
}

@software{CaskScalaHTTP2023,
  title = {Cask 0.9.0: A {{Scala HTTP}} Micro-Framework},
  shorttitle = {Cask 0.9.0},
  date = {2023-03-16T15:56:51Z},
  origdate = {2018-07-20T00:48:20Z},
  url = {https://github.com/com-lihaoyi/cask},
  urldate = {2023-03-17},
  abstract = {Cask: a Scala HTTP micro-framework},
  organization = {{com-lihaoyi}},
  keywords = {http,scala,server,web}
}

@book{crespireghizziFormalLanguagesCompilation2019,
  title = {Formal {{Languages}} and {{Compilation}}},
  author = {Crespi Reghizzi, Stefano and Breveglieri, Luca and Morzenti, Angelo},
  date = {2019},
  series = {Texts in {{Computer Science}}},
  publisher = {{Springer International Publishing}},
  location = {{Cham}},
  doi = {10.1007/978-3-030-04879-2},
  url = {http://link.springer.com/10.1007/978-3-030-04879-2},
  urldate = {2022-11-12},
  isbn = {978-3-030-04878-5 978-3-030-04879-2},
  langid = {english},
  keywords = {Automata,Compiler,Formal languages,Language theory,Programming,Translation},
  file = {C\:\\Users\\xaper\\Zotero\\storage\\GF459IAY\\Crespi Reghizzi et al. - 2019 - Formal Languages and Compilation.pdf}
}

@online{EasyParsingParser,
  title = {Easy {{Parsing}} with {{Parser Combinators}}},
  url = {http://www.lihaoyi.com/post/EasyParsingwithParserCombinators.html},
  urldate = {2023-03-14},
  file = {C\:\\Users\\xaper\\Zotero\\storage\\WFKEFDTY\\EasyParsingwithParserCombinators.html}
}

@book{friedlMasteringRegularExpressions2006,
  title = {Mastering {{Regular Expressions}}},
  author = {Friedl, Jeffrey},
  date = {2006-08-08},
  publisher = {{"O'Reilly Media, Inc."}},
  abstract = {Regular expressions are an extremely powerful tool for manipulating text and data. They are now standard features in a wide range of languages and popular tools, including Perl, Python, Ruby, Java, VB.NET and C\# (and any language using the .NET Framework), PHP, and MySQL.  If you don't use regular expressions yet, you will discover in this book a whole new world of mastery over your data. If you already use them, you'll appreciate this book's unprecedented detail and breadth of coverage. If you think you know all you need to know about regular expressions, this book is a stunning eye-opener.  As this book shows, a command of regular expressions is an invaluable skill. Regular expressions allow you to code complex and subtle text processing that you never imagined could be automated. Regular expressions can save you time and aggravation. They can be used to craft elegant solutions to a wide range of problems. Once you've mastered regular expressions, they'll become an invaluable part of your toolkit. You will wonder how you ever got by without them.  Yet despite their wide availability, flexibility, and unparalleled power, regular expressions are frequently underutilized. Yet what is power in the hands of an expert can be fraught with peril for the unwary. Mastering Regular Expressions will help you navigate the minefield to becoming an expert and help you optimize your use of regular expressions.   Mastering Regular Expressions, Third Edition, now includes a full chapter devoted to PHP and its powerful and expressive suite of regular expression functions, in addition to enhanced PHP coverage in the central "core" chapters. Furthermore, this edition has been updated throughout to reflect advances in other languages, including expanded in-depth coverage of Sun's java.util.regex package, which has emerged as the standard Java regex implementation.Topics include: A comparison of features among different versions of many languages and tools How the regular expression engine works Optimization (major savings available here!) Matching just what you want, but not what you don't want Sections and chapters on individual languages  Written in the lucid, entertaining tone that makes a complex, dry topic become crystal-clear to programmers, and sprinkled with solutions to complex real-world problems, Mastering Regular Expressions, Third Edition offers a wealth information that you can put to immediate use. Reviews of this new edition and the second edition: "There isn't a better (or more useful) book available on regular expressions."  --Zak Greant, Managing Director, eZ Systems  "A real tour-de-force of a book which not only covers the mechanics of regexes in extraordinary detail but also talks about efficiency and the use of regexes in Perl, Java, and .NET...If you use regular expressions as part of your professional work (even if you already have a good book on whatever language you're programming in) I would strongly recommend this book to you."  --Dr. Chris Brown, Linux Format   "The author does an outstanding job leading the reader from regex novice to master. The book is extremely easy to read and chock full of useful and relevant examples...Regular expressions are valuable tools that every developer should have in their toolbox. Mastering Regular Expressions is the definitive guide to the subject, and an outstanding resource that belongs on every programmer's bookshelf. Ten out of Ten Horseshoes."  --Jason Menard, Java Ranch},
  isbn = {978-0-596-52812-6},
  langid = {english},
  pagetotal = {542},
  keywords = {Computers / General,Computers / Languages / C,Computers / Languages / C\#,Computers / Languages / General,Computers / Languages / Java,Computers / Languages / JavaScript,Computers / Languages / SQL,Computers / Languages / XML,Computers / Programming / General,Computers / Programming / Object Oriented,Computers / Programming Languages / COBOL,Computers / Programming Languages / FORTRAN,Computers / Programming Languages / LISP,Computers / Programming Languages / Pascal,Computers / Programming Languages / RPG,Computers / Software Development & Engineering / General}
}

@online{hamrahLexingRagelParsing2017,
  title = {Lexing with {{Ragel}} and {{Parsing}} with {{Yacc}} Using {{Go}}},
  author = {Hamrah, Michael},
  date = {2017-01-09T03:08:30},
  url = {https://mhamrah.medium.com/lexing-with-ragel-and-parsing-with-yacc-using-go-81e50475f88f},
  urldate = {2022-11-11},
  abstract = {Occasionally I need to parse some input for processing and analysis. A Go Advent post from 2014 described handwritten lexers and parsers…},
  langid = {english},
  organization = {{Medium}},
  file = {C\:\\Users\\xaper\\Zotero\\storage\\CI7KJB7Y\\lexing-with-ragel-and-parsing-with-yacc-using-go-81e50475f88f.html}
}

@online{ifchorWhoWeAre2023,
  title = {Who We Are : {{Ifchor}}},
  author = {Ifchor},
  date = {2023-03-12},
  url = {https://ifchor.com/who-we-are/},
  urldate = {2023-03-12},
  file = {C\:\\Users\\xaper\\Zotero\\storage\\MGLQKE9I\\who-we-are.html}
}

@inreference{IntermodalContainer2023,
  title = {Intermodal Container},
  booktitle = {Wikipedia},
  date = {2023-02-19T00:17:13Z},
  url = {https://en.wikipedia.org/w/index.php?title=Intermodal_container&oldid=1140207736},
  urldate = {2023-03-13},
  abstract = {An intermodal container, often called a shipping container, is a large standardized container designed and built for intermodal freight transport, meaning these containers can be used across different modes of transport – from ship to rail to truck – without unloading and reloading their cargo. Intermodal containers are primarily used to store and transport materials and products efficiently and securely in the global containerized intermodal freight transport system, but smaller numbers are in regional use as well. These containers are known under a number of names. Based on size alone, up to 95\% of intermodal containers comply with ISO standards, and can officially be called ISO containers. Many other names are simply: container, cargo or freight container, shipping, sea or ocean container, container van or sea van, sea can or C can, or MILVAN, SEAVAN, or RO/RO. The also used term CONEX (Box) is technically incorrect carry-over usage of the name of an important predecessor of the international ISO containers, namely the much smaller prior steel CONEX boxes used by the U.S. Army. Intermodal containers exist in many types and a number of standardized sizes, but ninety percent of the global container fleet are so-called "dry freight" or "general purpose" containers – durable closed rectangular boxes, made of rust-retardant Corten steel; almost all 8 feet (2.44 m) wide, and of either 20 or 40 feet (6.10 or 12.19 m) standard length, as defined by International Organization for Standardization (ISO) standard 668:2020. The worldwide standard heights are 8 feet 6 inches (2.59 m) and 9 feet 6 inches (2.90 m) – the latter are known as High Cube or Hi-Cube (HC or HQ) containers.First invented in the early 20th century, modern 40-foot intermodal containers proliferated during the 1960s and 1970s under the containerization innovations of the American shipping company SeaLand.  Just like cardboard boxes and pallets, these containers are a means to bundle cargo and goods into larger, unitized loads, that can be easily handled, moved, and stacked, and that will pack tightly in a ship or yard. Intermodal containers share a number of key construction features to withstand the stresses of intermodal shipping, to facilitate their handling and to allow stacking, as well as being identifiable through their individual, unique ISO 6346 reporting mark. In 2012, there were about 20.5 million intermodal containers in the world of varying types to suit different cargoes. Containers have largely supplanted the traditional break bulk cargo – in 2010 containers accounted for 60\% of the world's seaborne trade. The predominant alternative methods of transport carry bulk cargo whether gaseous, liquid, or solid; e.g., by bulk carrier or tank ship, tank car, or truck. For air freight, the lighter weight IATA-defined unit load devices are used.},
  langid = {english},
  annotation = {Page Version ID: 1140207736}
}

@book{jurafskySpeechLanguageProcessing2009,
  title = {Speech and {{Language Processing}}: {{An Introduction}} to {{Natural Language Processing}}, {{Computational Linguistics}}, and {{Speech Recognition}}},
  shorttitle = {Speech and {{Language Processing}}},
  author = {Jurafsky, Dan and Martin, James H.},
  date = {2009},
  eprint = {fZmj5UNK8AQC},
  eprinttype = {googlebooks},
  publisher = {{Prentice Hall}},
  abstract = {For undergraduate or advanced undergraduate courses in Classical Natural Language Processing, Statistical Natural Language Processing, Speech Recognition, Computational Linguistics, and Human Language Processing.   An explosion of Web-based language techniques, merging of distinct fields, availability of phone-based dialogue systems, and much more make this an exciting time in speech and language processing. The first of its kind to thoroughly cover language technology - at all levels and with all modern technologies - this text takes an empirical approach to the subject, based on applying statistical and other machine-learning algorithms to large corporations. The authors cover areas that traditionally are taught in different courses, to describe a unified vision of speech and language processing. Emphasis is on practical applications and scientific evaluation. An accompanying Website contains teaching materials for instructors, with pointers to language processing resources on the Web. The Second Edition offers a significant amount of new and extended material.   Supplements:   Click on the "Resources" tab to View Downloadable Files:   Solutions   Power Point Lecture Slides - Chapters 1-5, 8-10, 12-13 and 24 Now Available!   For additional resourcse visit the author website: http://www.cs.colorado.edu/\textasciitilde martin/slp.html},
  isbn = {978-0-13-187321-6},
  langid = {english},
  pagetotal = {1027}
}

@online{khabarovRagelStateMachine2021,
  title = {Ragel: State Machine Compiler},
  shorttitle = {Ragel},
  author = {Khabarov, Evgeny},
  date = {2021-01-25T00:00:00+00:00},
  url = {https://ekhabarov.com/post/ragel-state-machine-compiler/},
  urldate = {2022-11-11},
  abstract = {Really fast way to build really fast parser.},
  langid = {american},
  organization = {{Writing here about Golang and Co.}},
  file = {C\:\\Users\\xaper\\Zotero\\storage\\63YYEVT7\\ragel-state-machine-compiler.html}
}

@inproceedings{langDeterministicTechniquesEfficient1974,
  title = {Deterministic {{Techniques}} for {{Efficient Non-Deterministic Parsers}}},
  booktitle = {Automata, {{Languages}} and {{Programming}}},
  author = {Lang, Bernard},
  editor = {Loeckx, Jacques},
  date = {1974},
  series = {Lecture {{Notes}} in {{Computer Science}}},
  pages = {255--269},
  publisher = {{Springer}},
  location = {{Berlin, Heidelberg}},
  doi = {10.1007/978-3-662-21545-6_18},
  abstract = {A general study of parallel non-deterministic parsing and translation à la Earley is developped formally, based on non-deterministic pushdown acceptor-transducers. Several results (camplexity and efficiency) are established, same new and other previously proved only in special cases. As an application, we show that for every family of deterministic context-free pushdown parsers (e.g. precedence, LR(k), LL(k), ...) there is a family of general context-free parallel parsers that have the same efficiency in most practical cases (e.g. analysis of programming languages).},
  isbn = {978-3-662-21545-6},
  langid = {english}
}

@online{LaycanDefinition,
  title = {Laycan {{Definition}}},
  url = {https://www.lawinsider.com/dictionary/laycan},
  urldate = {2022-12-29},
  abstract = {Sample Contracts and Business Agreements},
  langid = {english},
  organization = {{Law Insider}},
  file = {C\:\\Users\\xaper\\Zotero\\storage\\N3UPBC4B\\laycan.html}
}

@online{manaadiarDifferenceShipbrokerShip2019,
  title = {Difference between a Shipbroker and Ship Charterer},
  author = {Manaadiar, Hariesh},
  date = {2019-02-26T23:23:56+00:00},
  url = {https://www.shippingandfreightresource.com/shipbroker-and-ship-charterer/},
  urldate = {2023-03-13},
  abstract = {This article discusses the Difference between a shipbroker and ship charterer and the role that both of them play in global trade..},
  langid = {american},
  organization = {{Shipping and Freight Resource}},
  file = {C\:\\Users\\xaper\\Zotero\\storage\\2AKRCQJN\\shipbroker-and-ship-charterer.html}
}

@inproceedings{mazanekGraphParserCombinators2008,
  title = {Graph {{Parser Combinators}}},
  booktitle = {Implementation and {{Application}} of {{Functional Languages}}},
  author = {Mazanek, Steffen and Minas, Mark},
  editor = {Chitil, Olaf and Horváth, Zoltán and Zsók, Viktória},
  date = {2008},
  series = {Lecture {{Notes}} in {{Computer Science}}},
  pages = {1--18},
  publisher = {{Springer}},
  location = {{Berlin, Heidelberg}},
  doi = {10.1007/978-3-540-85373-2_1},
  abstract = {A graph language can be described by a graph grammar in a manner similar to a string grammar known from the theory of formal languages. Unfortunately, graph parsing is known to be computationally expensive in general. There are quite simple graph languages that crush most general-purpose graph parsers.},
  isbn = {978-3-540-85373-2},
  langid = {english},
  keywords = {functional programming,graph parsing,parser combinators,visual languages}
}

@article{niFrameworkDomainSpecificNatural2018,
  title = {A {{Framework}} for {{Domain-Specific Natural Language Information Brokerage}}},
  author = {Ni, Lin and Liu, Jiamou},
  date = {2018-10-01},
  journaltitle = {Journal of Systems Science and Systems Engineering},
  shortjournal = {J. Syst. Sci. Syst. Eng.},
  volume = {27},
  number = {5},
  pages = {559--585},
  issn = {1861-9576},
  doi = {10.1007/s11518-018-5389-1},
  url = {https://doi.org/10.1007/s11518-018-5389-1},
  urldate = {2023-04-02},
  abstract = {Service providers — from public institutions to primary care facilities — need to constantly attend to clients’ inquiries to provide useful information and directive guidelines. Ensuring high quality service is challenging as it not only demands detailed domain-specific knowledge, but also the ability to quickly understand the clients’ issues through their diverse — and often casual — descriptions. This paper aims to provide a framework for the development of an automated information broker agent who performs the task of a helper. The main task of the agent is to interact with the client and direct them to obtain further services that cater their personalized need. To do so, the agent should accomplish a sequence of tasks that include natural language inquiry, knowledge gathering, reasoning, and giving feedback; in this way, it simulates a human helper to engage in interaction with the client. The framework combines a question-answering reasoning mechanism while utilizing domain-specific knowledge base. When the users cannot describe clearly their needs, the system tries to narrow down the possibilities by an iterative question-answering process, until it eventually identifies the target. In realizing our framework, we make a proof-of-concept project, Mandy, a primary care chatbot system created to assist healthcare staffs by automating the patient intake process. We describe in detail the system functionalities and design of the system, and evaluate our proof-of-concept on benchmark case studies.},
  langid = {english},
  keywords = {AI and healthcare,automated information broker,chatbot,iterative inquiry,language processing,Question and answer system},
  file = {C\:\\Users\\xaper\\Zotero\\storage\\SDCQSR3A\\Ni_Liu_2018_A Framework for Domain-Specific Natural Language Information Brokerage.pdf}
}

@online{NLTKNaturalLanguage,
  title = {{{NLTK}} :: {{Natural Language Toolkit}}},
  url = {https://www.nltk.org/},
  urldate = {2023-03-14},
  file = {C\:\\Users\\xaper\\Zotero\\storage\\F7L8NHL5\\www.nltk.org.html}
}

@book{nystromCraftingInterpreters2021,
  title = {Crafting {{Interpreters}}},
  author = {Nystrom, Robert},
  date = {2021-07-27},
  eprint = {q0c6EAAAQBAJ},
  eprinttype = {googlebooks},
  publisher = {{Genever Benning}},
  abstract = {Despite using them every day, most software engineers know little about how programming languages are designed and implemented. For many, their only experience with that corner of computer science was a terrifying \&quot;compilers\&quot; class that they suffered through in undergrad and tried to blot from their memory as soon as they had scribbled their last NFA to DFA conversion on the final exam.That fearsome reputation belies a field that is rich with useful techniques and not so difficult as some of its practitioners might have you believe. A better understanding of how programming languages are built will make you a stronger software engineer and teach you concepts and data structures you\&\#39;ll use the rest of your coding days. You might even have fun.This book teaches you everything you need to know to implement a full-featured, efficient scripting language. You\&\#39;ll learn both high-level concepts around parsing and semantics and gritty details like bytecode representation and garbage collection. Your brain will light up with new ideas, and your hands will get dirty and calloused.Starting from main(), you will build a language that features rich syntax, dynamic typing, garbage collection, lexical scope, first-class functions, closures, classes, and inheritance. All packed into a few thousand lines of clean, fast code that you thoroughly understand because you wrote each one yourself.},
  isbn = {978-0-9905829-4-6},
  langid = {english},
  pagetotal = {1021},
  keywords = {Computers / Languages / General,Computers / Programming / Compilers,Computers / Software Development & Engineering / Tools}
}

@online{OxfordEnglishDictionary,
  title = {Oxford {{English Dictionary}}},
  shorttitle = {Oxford {{English Dictionary}}},
  url = {https://www.oed.com/},
  urldate = {2023-03-14},
  abstract = {The OED is the definitive record of the English language, featuring 600,000 words, 3 million quotations, and over 1,000 years of English.},
  langid = {english},
  organization = {{Oxford English Dictionary}},
  file = {C\:\\Users\\xaper\\Zotero\\storage\\K4T85MNU\\www.oed.com.html}
}

@inreference{ParserCombinator2023,
  title = {Parser Combinator},
  booktitle = {Wikipedia},
  date = {2023-02-27T11:49:50Z},
  url = {https://en.wikipedia.org/w/index.php?title=Parser_combinator&oldid=1141893658},
  urldate = {2023-03-15},
  abstract = {In computer programming, a parser combinator is a higher-order function that accepts several parsers as input and returns a new parser as its output. In this context, a parser is a function accepting strings as input and returning some structure as output, typically a parse tree or a set of indices representing locations in the string where parsing stopped successfully. Parser combinators enable a recursive descent parsing strategy that facilitates modular piecewise construction and testing. This parsing technique is called combinatory parsing. Parsers using combinators have been used extensively in the prototyping of compilers and processors for domain-specific languages such as natural-language interfaces to databases, where complex and varied semantic actions are closely integrated with syntactic processing. In 1989, Richard Frost and John Launchbury demonstrated use of parser combinators to construct natural-language interpreters. Graham Hutton also used higher-order functions for basic parsing in 1992 and monadic parsing in 1996. S. D. Swierstra also exhibited the practical aspects of parser combinators in 2001. In 2008, Frost, Hafiz and Callaghan described a set of parser combinators in Haskell that solve the long-standing problem of accommodating left recursion, and work as a complete top-down parsing tool in polynomial time and space.},
  langid = {english},
  annotation = {Page Version ID: 1141893658},
  file = {C\:\\Users\\xaper\\Zotero\\storage\\FM89NK7U\\Parser_combinator.html}
}

@book{plomaritouShipbrokingCharteringPractice2017,
  title = {Shipbroking and {{Chartering Practice}}},
  author = {Plomaritou, Evi and Papadopoulos, Anthony},
  date = {2017-12-14},
  eprint = {FkMHjwEACAAJ},
  eprinttype = {googlebooks},
  publisher = {{Informa Law from Routledge}},
  abstract = {Now in its eighth edition, this classic text is a first point of reference for anyone looking to obtain an understanding of chartering and shipbroking practice. It provides hands-on, commercially-focused explanations of chartering business and invaluable advice on how the shipping market operates across a broad range of topics. The authors also deal expertly with the legal, financial, operational and managerial aspects of chartering, offering numerous case studies which clearly link theory to practice.  This new edition has been fully revised and updated to reflect the current trends in chartering practice, legal developments and standard forms of charterparties. New to this edition:      Enriched with practical examples covering　crucial aspects of chartering and shipbroking business, such as voyage estimations, freight conversions and tanker calculations.    New material on day-to-day laytime principles, including "Laytime Definitions for Charterparties 2013", associated commentary and relevant examples.     Shipping Marketing as a modern tool of improving chartering and shipbroking business.     Expanded coverage of the economic background of chartering, including markets, vessels, cargoes, trades and fixtures.    Freight rates for all vessel types from 1980 to 2015.     Updated review of well-known standard charterparty documents (including NYPE 2015), together with clauses and wordings commonly applying to various charter types.     Analytical glossary containing typical terms and abbreviations used in chartering negotiations.     This book is an essential guide for practitioners in private practice and in-house for shipowners and cargo houses, as well as those studying shipbroking and chartering.},
  isbn = {978-1-138-82694-6},
  langid = {english},
  pagetotal = {738}
}

@online{RagelStateMachine,
  title = {Ragel {{State Machine Compiler}}},
  url = {http://www.colm.net/open-source/ragel/},
  urldate = {2023-03-14},
  file = {C\:\\Users\\xaper\\Zotero\\storage\\HMPAMZ2W\\ragel.html}
}

@online{ScalaParserCombinators,
  title = {Scala {{Parser Combinators}} 2.2.0 - Scala.Util.Parsing.Combinator},
  url = {https://javadoc.io/static/org.scala-lang.modules/scala-parser-combinators_2.13/2.2.0/scala/util/parsing/combinator/index.html},
  urldate = {2023-03-17}
}

@software{Scalaparsercombinators2023,
  title = {Scala-Parser-Combinators},
  date = {2023-03-13T02:43:44Z},
  origdate = {2013-08-15T18:35:18Z},
  url = {https://github.com/scala/scala-parser-combinators/blob/2084983b79c7ed519d78d937625598cb5a0a41dd/docs/Getting_Started.md},
  urldate = {2023-03-17},
  abstract = {simple combinator-based parsing for Scala. formerly part of the Scala standard library, now a separate community-maintained module},
  organization = {{The Scala Programming Language}}
}

@online{ShipbrokerIFCHOROpens2018,
  title = {Shipbroker {{IFCHOR}} Opens up in {{Dubai}}},
  date = {2018-01-11T01:16:26+00:00},
  url = {https://www.seatrade-maritime.com/europe/shipbroker-ifchor-opens-dubai},
  urldate = {2023-03-12},
  abstract = {Lausanne-based international shipbroking company IFCHOR has opened a new office in Dubai under the name IFCHOR Middle East, aiming to conduct primarily dry business across the GCC region.},
  langid = {english},
  organization = {{Seatrade Maritime}},
  file = {C\:\\Users\\xaper\\Zotero\\storage\\GIAXBXJ3\\shipbroker-ifchor-opens-dubai.html}
}

@online{splashShipbrokingSteppingstoneShipowning2016,
  title = {Shipbroking as a Stepping-Stone to Shipowning? {{Delusional}}},
  shorttitle = {Shipbroking as a Stepping-Stone to Shipowning?},
  author = {Splash},
  date = {2016-03-08T02:58:56+00:00},
  url = {https://splash247.com/shipbroking-as-a-stepping-stone-to-shipowning-delusional/},
  urldate = {2023-03-13},
  abstract = {Panos Patsadas, MD at Target Maritime Transport, reckons too many young men and women are becoming brokers for the wrong reasons. This is a topic I have long been wanting to talk about as it is something I come across every single day. I get CVs every day with young people aspiring to be shipbrokers. …},
  langid = {british},
  organization = {{Splash247}}
}

@book{stevensonOxfordDictionaryEnglish2010,
  title = {Oxford {{Dictionary}} of {{English}}},
  author = {Stevenson, Angus},
  date = {2010-08-19},
  eprint = {anecAQAAQBAJ},
  eprinttype = {googlebooks},
  publisher = {{OUP Oxford}},
  abstract = {The foremost single volume authority on the English language, the Oxford Dictionary of English is at the forefront of language research, focusing on English as it is used today. It is informed by the most up-to-date evidence from the largest language research programme in the world, including the two-billion-word Oxford English Corpus. This new edition includes thousands of brand-new words and senses, as well as up-to-date encyclopedic information, and extensive appendices covering topics such as countries, heads of state, and chemical elements. New features include Word Trends which showcase language research based on the Oxford English Corpus and illuminate the extraordinary stories behind fast-changing words of everyday English. 12 months' access to Oxford's premium online dictionary and thesaurus service is included with this book, so you can get accurate definitions and synonyms wherever you are. Find out more about our living language using Oxford Dictionaries Pro - updated regularly with the latest changes to words and meanings, so you have the most accurate picture of English available. Use the thousands of audio pronunciations to hear how words are spoken. Improve your confidence in writing with helpful grammar and punctuation guides, full thesaurus information, style and usage help, and much more.},
  isbn = {978-0-19-957112-3},
  langid = {english},
  pagetotal = {2093},
  keywords = {Foreign Language Study / English as a Second Language,Language Arts & Disciplines / Journalism,Reference / Dictionaries}
}

@inreference{Telex2023,
  title = {Telex},
  booktitle = {Wikipedia},
  date = {2023-02-22T15:39:50Z},
  url = {https://en.wikipedia.org/w/index.php?title=Telex&oldid=1140945522},
  urldate = {2023-03-14},
  abstract = {The telex network is a station-to-station switched network of teleprinters similar to a telephone network, using telegraph-grade connecting circuits for two-way text-based messages. Telex was a major method of sending written messages electronically between businesses in the post–World War II period. Its usage went into decline as the fax machine grew in popularity in the 1980s. The term "telex" refers to the network, and sometimes the teleprinters (as "telex machines"), although point-to-point teleprinter systems had been in use long before telex exchanges were built in the 1930s. Teleprinters evolved from telegraph systems, and, like the telegraph, use binary signals, with mark and space logic represented by the presence or absence of a certain level of electric current. This differs from the analog telephone system, which used varying voltage to represent sound. For this reason, telex exchanges were entirely separate from the telephone system, with their own signalling standards, exchanges and system of telex numbers (the counterpart of telephone numbers). Telex provided the first common medium for international record communications using standard signalling techniques and operating criteria as specified by the International Telecommunication Union. Customers on any telex exchange could deliver messages to any other, around the world. To reduce connecting line usage, telex messages were encoded onto paper tape and then read into the line as quickly as possible. The system normally delivered information at 50 baud or approximately 66 words per minute, encoded using the International Telegraph Alphabet No. 2. In the last days of the traditional telex networks, end-user equipment was often replaced by modems and phone lines, reducing the telex network to what was effectively a directory service running on the phone network.},
  langid = {english},
  annotation = {Page Version ID: 1140945522},
  file = {C\:\\Users\\xaper\\Zotero\\storage\\JU8W5WG5\\Telex.html}
}

@software{thurstonAdrianthurstonRagel2023,
  title = {Adrian-Thurston/Ragel},
  author = {Thurston, Adrian},
  date = {2023-03-11T21:03:19Z},
  origdate = {2020-03-07T13:42:38Z},
  url = {https://github.com/adrian-thurston/ragel/blob/65540b65ff09330b0293423e3fecc44e63f30614/examples/clang.rl},
  urldate = {2023-03-13},
  abstract = {Ragel State Machine Compiler}
}

@unpublished{tristanpenmanGeneratingParsersUsing09:36:54UTC,
  title = {Generating Parsers Using {{Ragel}} and {{Lemon}}},
  author = {Tristan Penman},
  year = {09:36:54 UTC},
  url = {https://www.slideshare.net/tristanpenman/generating-parsers-using-ragel-and-lemon?from_action=save},
  urldate = {2022-11-30}
}

@online{WhatTraderWhat,
  title = {What {{Is}} a {{Trader}} and {{What Do Traders Do}}?},
  url = {https://www.investopedia.com/terms/t/trader.asp},
  urldate = {2023-03-11},
  abstract = {A trader is an individual who engages in the transfer of financial assets in any financial market, either for themselves, or on behalf of a someone else.},
  langid = {english},
  organization = {{Investopedia}},
  file = {C\:\\Users\\xaper\\Zotero\\storage\\8EEYISSI\\trader.html}
}

@online{zotero-165,
  url = {http://polux.github.io/parsers/},
  urldate = {2023-04-02},
  file = {C\:\\Users\\xaper\\Zotero\\storage\\U7B76AYV\\parsers.html}
}
